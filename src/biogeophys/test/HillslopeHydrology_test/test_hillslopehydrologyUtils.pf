module test_hillslopehydrologyUtils
  
  ! Tests of the HillslopeHydrologyUtils module

  use funit
  use unittestSubgridMod
  ! use dynInitColumnsMod
  use ColumnType      , only : col
  use LandunitType    , only : lun
  use GridcellType    , only : grc
  use landunit_varcon , only : istwet
  use decompMod       , only : bounds_type
  use clm_varcon      , only : ispval
  use clm_varpar      , only : nlevsno, nlevgrnd
  use shr_kind_mod    , only : r8 => shr_kind_r8
  use HillslopeHydrologyUtilsMod, only : HillslopeSoilThicknessProfile_linear

  implicit none

  integer, parameter :: nlevsoi = 5

  @TestCase
  type, extends(TestCase) :: TestInit
     integer :: c_new     ! column index of the new column to initialize in some tests
     integer :: l1        ! index of the landunit with landunit type 1
     integer :: l2        ! index of the landunit with landunit type 2
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInit

contains

  subroutine setUp(this)
    ! Set up variables needed for tests: various subgrid type variables, along with
    ! bounds.
    !
    ! col%active etc. need to be set by specific tests
    use clm_varcon, only: clm_varcon_init, zisoi
    use clm_varpar, only: nlevgrnd
    class(TestInit), intent(inout) :: this
    real(r8), parameter :: my_zisoi(nlevsoi) = [0.01_r8, 0.02_r8, 2._r8, 4._r8, 6._r8]

    ! Set up subgrid structure
    ! The weights (of both landunits and columns) and column types in the following are
    ! arbitrary, since they are not important for these tests

    call unittest_subgrid_setup_start()

    call unittest_add_gridcell()

    ! The first landunit is neither natural veg nor crop
    call unittest_add_landunit(my_gi=gi, ltype=istwet, wtgcell=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_add_landunit(my_gi=gi, ltype=1, wtgcell=0.5_r8)
    this%l1 = li
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    ! This column (the second column on the landunit with ltype=1) will be the target for
    ! some tests of initialization of a new column
    this%c_new = ci
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)

    call unittest_add_landunit(my_gi=gi, ltype=2, wtgcell=0.25_r8)
    this%l2 = li
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_subgrid_setup_end()

    ! These will be enabled by specific tests
    col%active(begc:endc) = .false.
    col%is_hillslope_column(begc:endc) = .false.

    ! Set up ground/soil structure
    nlevgrnd = size(my_zisoi)
    call clm_varcon_init( is_simple_buildtemp = .true.)
    zisoi(0) = 0._r8
    zisoi(1:nlevgrnd) = my_zisoi(:)

  end subroutine setUp

  subroutine tearDown(this)
    ! clean up stuff set up in setup()
    class(TestInit), intent(inout) :: this

    call unittest_subgrid_teardown()

  end subroutine tearDown

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear(this)
    class(TestInit), intent(inout) :: this
    real(r8), parameter :: soil_depth_lowland = 8.0
    real(r8), parameter :: soil_depth_upland = 8.0
    integer, allocatable :: nbedrock_expected(:)
    integer :: l, c

    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Setting nbedrock to nlevsoi means that none of the layers from 1:nlevsoi are
    ! considered bedrock
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    col%nbedrock(bounds%begc:bounds%endc) = nlevsoi

    ! Set up example land unit
    l = bounds%begl
    do c = lun%coli(l), lun%colf(l)
       col%hill_distance(c) = real(c, kind=r8)
       nbedrock_expected(c) = real(2*c, kind=r8)
    end do

    call HillslopeSoilThicknessProfile_linear(col%nbedrock, bounds, soil_depth_lowland, soil_depth_upland)

    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

  end subroutine test_HillslopeSoilThicknessProfile_linear

end module test_hillslopehydrologyUtils

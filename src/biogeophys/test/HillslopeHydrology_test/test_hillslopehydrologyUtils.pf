module test_hillslopehydrologyUtils
  
  ! Tests of the HillslopeHydrologyUtils module

  use funit
  use unittestSubgridMod
  ! use dynInitColumnsMod
  use ColumnType      , only : col
  use LandunitType    , only : lun
  use GridcellType    , only : grc
  use landunit_varcon , only : istwet
  use decompMod       , only : bounds_type
  use clm_varctl      , only : iulog
  use clm_varcon      , only : ispval
  use clm_varpar      , only : nlevsno, nlevgrnd
  use shr_kind_mod    , only : r8 => shr_kind_r8
  use HillslopeHydrologyUtilsMod, only : HillslopeSoilThicknessProfile_linear

  implicit none

  ! From clm_instInit
  real(r8), parameter :: soil_depth_lowland = 8.5_r8
  real(r8), parameter :: soil_depth_upland = 2._r8

  @TestCase
  type, extends(TestCase) :: TestInit
     integer :: c_new     ! column index of the new column to initialize in some tests
     integer :: l1        ! index of the landunit with landunit type 1
     integer :: l2        ! index of the landunit with landunit type 2
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestInit

contains

  subroutine setUp(this)
    ! Set up variables needed for tests: various subgrid type variables, along with
    ! bounds.
    !
    ! col%active etc. need to be set by specific tests
    use clm_varcon, only: clm_varcon_init, zisoi
    use clm_varpar, only: nlevsoi, nlevgrnd
    class(TestInit), intent(inout) :: this
    integer :: g, l, c
    real(r8), allocatable :: my_zisoi(:)

    ! Set up subgrid structure
    ! The weights (of both landunits and columns) and column types in the following are
    ! arbitrary, since they are not important for these tests

    call unittest_subgrid_setup_start()

    ! Set up gridcell with one landunit and two columns
    call unittest_add_gridcell()
    call unittest_add_landunit(my_gi=gi, ltype=istwet, wtgcell=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_subgrid_setup_end()

    ! These will be enabled by specific tests
    col%active(begc:endc) = .false.
    col%is_hillslope_column(begc:endc) = .false.

    ! Set up ground/soil structure
    nlevsoi = 5
    allocate(my_zisoi(1:nlevsoi))
    my_zisoi = [0.01_r8, 0.02_r8, 2._r8, 4._r8, 6._r8]
    nlevgrnd = size(my_zisoi)
    call clm_varcon_init( is_simple_buildtemp = .true.)
    zisoi(0) = 0._r8
    zisoi(1:nlevgrnd) = my_zisoi(:)

    do g = bounds%begg, bounds%endg
      write(iulog, *) 'g = ',g
      do l = 1,1
        if (lun%gridcell(l) /= g) then
          cycle
        end if
        write(iulog, *) '   l = ',l
        do c = lun%coli(l), lun%colf(l)
          write(iulog, *) '      c = ',c
        end do
      end do
    end do

    deallocate(my_zisoi)

  end subroutine setUp

  subroutine tearDown(this)
    ! clean up stuff set up in setup()
    use clm_varcon, only: clm_varcon_clean
    class(TestInit), intent(inout) :: this

    call unittest_subgrid_teardown()
    call clm_varcon_clean()

  end subroutine tearDown

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer, parameter :: nbedrock_dummy_value = 9999
    integer :: l, c

    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Set up example land units
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    col%nbedrock(bounds%begc:bounds%endc) = nbedrock_dummy_value
    ! Column 1: Varying hill_distance
    l = bounds%begl
    do c = lun%coli(l), lun%colf(l)
       col%hill_distance(c) = real(c, kind=r8)
    end do

    ! Get expected values !!!!!!!!!!!!!!!!!!!
    ! Layer 1 soil_depth_col = 8.5
    ! Layer 2 soil_depth_col = 2.0
    nbedrock_expected(lun%coli(l)) = 9999
    nbedrock_expected(lun%coli(l) + 1) = 3

    call HillslopeSoilThicknessProfile_linear(col%nbedrock, bounds, col%hill_distance, soil_depth_lowland, soil_depth_upland)

    l = bounds%begl
    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_inactive(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer, parameter :: nbedrock_dummy_value = 9999
    integer :: l, c

    col%active(bounds%begc:bounds%endc) = .false.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .true.

    ! Set up example land units
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    col%nbedrock(bounds%begc:bounds%endc) = nbedrock_dummy_value
    ! Column 1: Varying hill_distance
    l = bounds%begl
    do c = lun%coli(l), lun%colf(l)
       col%hill_distance(c) = real(c, kind=r8)
    end do

    ! Get expected values !!!!!!!!!!!!!!!!!!!
    ! Layer 1 soil_depth_col = 8.5
    ! Layer 2 soil_depth_col = 2.0, but not active
    nbedrock_expected(lun%coli(l)) = 9999
    nbedrock_expected(lun%coli(l) + 1) = 9999

    call HillslopeSoilThicknessProfile_linear(col%nbedrock, bounds, col%hill_distance, soil_depth_lowland, soil_depth_upland)

    l = bounds%begl
    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_inactive

  @Test
  subroutine test_HillslopeSoilThicknessProfile_linear_nohillslope(this)
    class(TestInit), intent(inout) :: this
    integer, allocatable :: nbedrock_expected(:)
    integer, parameter :: nbedrock_dummy_value = 9999
    integer :: l, c

    col%active(bounds%begc:bounds%endc) = .true.
    col%is_hillslope_column(bounds%begc:bounds%endc) = .false.

    ! Set up example land units
    allocate(nbedrock_expected(bounds%begc:bounds%endc))
    col%nbedrock(bounds%begc:bounds%endc) = nbedrock_dummy_value
    l = bounds%begl
    do c = lun%coli(l), lun%colf(l)
       col%hill_distance(c) = real(c, kind=r8)
    end do

    ! Get expected values !!!!!!!!!!!!!!!!!!!
    ! Layer 1 soil_depth_col = 8.5
    ! Layer 2 soil_depth_col = 2.0, but not is_hillslope_column
    nbedrock_expected(lun%coli(l)) = 9999
    nbedrock_expected(lun%coli(l) + 1) = 9999

    call HillslopeSoilThicknessProfile_linear(col%nbedrock, bounds, col%hill_distance, soil_depth_lowland, soil_depth_upland)

    l = bounds%begl
    @assertEqual(nbedrock_expected(lun%coli(l):lun%colf(l)), col%nbedrock(lun%coli(l):lun%colf(l)))

    deallocate(nbedrock_expected)

  end subroutine test_HillslopeSoilThicknessProfile_linear_nohillslope

end module test_hillslopehydrologyUtils
